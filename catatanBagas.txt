1. buat migration table nya dan buat function relasi pada model
2. kemudian buat akun dengan db seed
        public function run(): void
            {
                // User::factory(10)->create();

                User::create([
                    'nama' => 'admin',
                    'email' => 'admin@gmail.com',
                    'alamat' => 'Jakarta',
                    'jenis' => 'admin',
                    'telepon' => '089878976544',
                    'password' => Hash::make('12345678')

                ]);
            }
3.kemudian buat component livewire HomeComponent dengan cara php artisan make:livewire HomeComponent
4. Atur store login ke redirect 'home'
5. Costumisasi pada component/layouts/ seperti header dan sidebar

===============================================
view/app.blade
<x-layouts.app.sidebar :title="$title ?? null">
    <flux:main>
        {{ $slot }}
    </flux:main>
</x-layouts.app.sidebar>

seluruh component akan masuk dalam $slot
===============================================

7. Buat component baru bernama card untk menampung card key INdeks
    php artisan make:view component/layouts/card

8. gunaka theme daisy ui untuk ui bagus, kemudian pahami penggunaan flex dan warp
================================================================================
        USER component
9. buat UserComponent dengn php artisan make:livewire UserComponent
10. buat Route get user dan tambah navigasi user disidebar component
12. buat logika tombol login dan logout menggunalan @auth dan @guest
13. Atur UserComponent untuk mendapatkan data user dan gunakan fitur pagination
14. Buat Btn TambahUser gunakan modal form beri wire:model tiap input kan alert ketika error

    <legend class="fieldset-legend">Tambah User</legend>
                    <label class="label">Nama</label>
                    <input type="text" class="input w-auto" wire:model='nama' placeholder="Masukan nama."
                        value="{{@old('nama')}}" />
                    @error('nama')
                    <div role="alert" class="alert alert-error">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current" fill="none"
                            viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>{{$message}}</span>
                    </div>

15. Pada USerComponent tambahkan model yang dibuat tadi
    public $nama,$email,$password;
    ini untuk menerima input dari wire:model
16. create session pada store data user untuk keperluan alert
17. buat modal untuk edit ambil parameter id
    <a class="btn btn-xs btn-dash btn-info" onclick="edit.showModal()"
                            wire:click='edit({{$users->id}})'>Edit</a>
    , buat function edit untuk kemudian definisikan id,nama,email,password
    public function edit($id)
    {
        $user = User::find($id);

        if ($user) {
            $this->user_id = $user->id;
            $this->nama = $user->nama;
            $this->email = $user->email;
            $this->password = '';
        }
    }
    , kemudia beri click update, dan buat function updatenya
        public function update()
    {
        $user = User::find($this->user_id);

        if (!$user) {
            session()->flash('error', 'User tidak ditemukan.');
            return;
        }

        if ($this->password == '') {
            $user->update([
                'nama' => $this->nama,
                'email' => $this->email
            ]);
        } else {
            $user->update([
                'nama' => $this->nama,
                'email' => $this->email,
                'password' => bcrypt($this->password)
            ]);
        }

        session()->flash('success', 'Berhasil update user');
        $this->reset();
    }

18. Buat modal hapus dan beri clik confirm get id saja
    public function confirm($id){
        $user = User::find($id);
        if($user){
            $this->nama = $user->nama;
            $this->user_id = $user->id;
        }
    }

    buat juga function destroy
    public function destroy(){
        $user = User::find($this->user_id);
        if($user){
            $user->delete();
        }else{
            session()->flash('error','Data Tidak Ada!');
        }
    }

19. Buat input untuk search dan beri event wire:model.live="cari", kmudian definisikan di UserComponent
    - <input type="text" wire:model.live='cari' placeholder="Type here" class="input" />
    - public $nama, $email, $password, $user_id, $cari;

    kemudian beri logika di function render

    public function render()
    {
        if ($this->cari != '') {
            $data['user'] = User::where('nama', 'like', '%' . $this->cari . '%')->orWhere('email', 'like', '%' . $this->cari . '%')->paginate(10);
        } else {
            $data['user'] = User::paginate(10);
        }
        return view('livewire.user-component', $data);
    }

=========== Kelola Member ===========
20. Buat MemberComponeent -> php artisan make:livewire MemberComponeent
21. Atur functinon rendernya jenis = member dan define nama,alamt,email,password,telpon
    public $nama, $alamat, $email, $telepon, $member_id, $cari, $password;
    public function render()
    {
        if ($this->cari != '') {
            $data['member'] = User::where('jenis', 'member')->orWhere('nama', '%' . $this->cari . '%')->orWhere('email', '%' . $this->cari . '%')->paginate(10);
        }else{

            $data['member'] = User::where('jenis', 'member')->paginate(10);
        }
        return view('livewire.member-component',$data);
    }
22. Buat route member
23. Tambahkan navigasi memberi disidebar

